generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Alimento {
  IdAlimento                            Int     @id
  NomeAlimento                          String  @db.VarChar(45)
  Foto                                  String? @db.VarChar(45)
  ValoriNutrizionali                    String? @db.LongText
  CategoriaAlimento_IdCategoriaAlimento Int

  @@index([CategoriaAlimento_IdCategoriaAlimento], map: "fk_Alimento_CategoriaAlimento1")
}

model DettaglioUtente {
  IdDettaglioUtente Int    @id @default(autoincrement())
  Peso              String @db.VarChar(45)
  Altezza           String @db.VarChar(45)
  DataDettaglio     String @db.VarChar(45)
  Storico           Int    @default(0) @db.TinyInt
  Utente_IdUtente   Int
  Utente            Utente @relation(fields: [Utente_IdUtente], references: [IdUtente], onDelete: NoAction, onUpdate: NoAction, map: "fk_DettaglioUtente_Utente")

  @@index([Utente_IdUtente], map: "fk_DettaglioUtente_Utente")
}

model Esercizio {
  IdEsercizio          Int     @id @default(autoincrement())
  IndexFoto            Int
  NomeEsercizio        String  @db.VarChar(45)
  DescrizioneEsercizio String? @db.VarChar(45)
  ParteCorpo           String  @db.VarChar(50)
  Obiettivo            String  @db.VarChar(50)
  Attrezzatura         String  @db.VarChar(50)
  Foto                 String? @db.VarChar(100)
}

model ProtocolloAlimentare {
  IdProtocolloAlimentare     Int      @id @default(autoincrement())
  InizioProtocolloAlimentare DateTime @db.Date
  FineProtocolloAlimentare   DateTime @db.Date
  Storico                    Int      @default(0) @db.TinyInt
  Json                       String?  @db.LongText
  Utente_IdUtente            Int
  Utente                     Utente   @relation(fields: [Utente_IdUtente], references: [IdUtente], onDelete: NoAction, onUpdate: NoAction, map: "fk_ProtocolloAlimentare_Utente1")

  @@index([Utente_IdUtente], map: "fk_ProtocolloAlimentare_Utente1")
}

model ProtocolloAllenamento {
  IdProtocolloAllenamento     Int                 @id @default(autoincrement())
  InizioProtocolloAllenamento DateTime            @db.Date
  FineProtocolloAllenamento   DateTime            @db.Date
  Storico                     Int                 @default(0) @db.TinyInt
  Json                        String?             @db.LongText
  Utente_IdUtente             Int
  Utente                      Utente              @relation(fields: [Utente_IdUtente], references: [IdUtente], onDelete: NoAction, onUpdate: NoAction, map: "fk_ProtocolloAllenamento_Utente1")
  DiarioAllenamento           DiarioAllenamento[]

  @@index([Utente_IdUtente], map: "fk_ProtocolloAllenamento_Utente1")
}

model Utente {
  IdUtente              Int                     @id @default(autoincrement())
  Nome                  String                  @db.VarChar(45)
  Cognome               String                  @db.VarChar(45)
  DataNascita           String                  @db.VarChar(45)
  Email                 String                  @unique(map: "Email") @db.VarChar(45)
  Password              String                  @db.VarChar(255)
  Ruolo                 Utente_Ruolo
  Storico               Int                     @default(0) @db.TinyInt
  Utente_IdUtente       Int?
  Utente                Utente?                 @relation("UtenteToUtente_Utente_IdUtente", fields: [Utente_IdUtente], references: [IdUtente], onDelete: NoAction, onUpdate: NoAction, map: "FKCoach_Atleta")
  DettaglioUtente       DettaglioUtente[]
  ProtocolloAlimentare  ProtocolloAlimentare[]
  ProtocolloAllenamento ProtocolloAllenamento[]
  Segnalazioni          Segnalazioni[]
  other_Utente          Utente[]                @relation("UtenteToUtente_Utente_IdUtente")

  @@index([Utente_IdUtente], map: "FKCoach_Atleta")
}

model DiarioAllenamento {
  IdDiarioAllenamento                           Int                    @id @default(autoincrement())
  Storico                                       Boolean                @default(false)
  Json                                          String?                @db.LongText
  ProtocolloAllenamento_IdProtocolloAllenamento Int?
  ProtocolloAllenamento                         ProtocolloAllenamento? @relation(fields: [ProtocolloAllenamento_IdProtocolloAllenamento], references: [IdProtocolloAllenamento], onDelete: Restrict, onUpdate: Restrict, map: "diarioallenamento_ibfk_1")

  @@index([ProtocolloAllenamento_IdProtocolloAllenamento], map: "ProtocolloAllenamento_IdProtocolloAllenamento")
}

model Segnalazioni {
  IdSegnalazione          Int                            @id @default(autoincrement())
  OggettoSegnalazione     String                         @db.VarChar(45)
  DescrizioneSegnalazione String                         @db.Text
  StatoSegnalazione       Segnalazioni_StatoSegnalazione @default(aperta)
  Utente_IdUtente         Int?
  Utente                  Utente?                        @relation(fields: [Utente_IdUtente], references: [IdUtente], onDelete: Restrict, onUpdate: Restrict, map: "segnalazioni_ibfk_1")

  @@index([Utente_IdUtente], map: "Utente_IdUtente")
}

enum Utente_Ruolo {
  admin
  coach
  atleta
}

enum Segnalazioni_StatoSegnalazione {
  aperta
  elaborazione
  completata
  EMPTY_ENUM_VALUE @map("")
}
